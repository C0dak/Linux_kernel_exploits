#!/usr/bin/python
from pwn import *
qemu_console_port=9210
host = '127.0.0.1'

class NotImplementError(ValueError): 
    print('Not implemented yet')
    pass


def parse_qemu_memory_dump(raw,addr,offset):
    lines = raw.split('\r\n')
    nums=[]
    con=''
    for i,line in enumerate(lines):
        _ = line.split(' ')[1:]
        nums+=_
    for _ in nums:
        con+=p64(int(_,16))
    return con
       
    
def page_mapped(r,addr):
    cmd = 'x/bx '+str(addr)
    r.sendline(cmd)
    r.recvuntil(cmd)
    raw=r.recvuntil('(qemu)').strip('\r\n(qemu)').strip('\x1b[K\r\n')
    if 'Cannot access memory' in raw:
        return False
    return True

def get_memory(r, addr,offset): #why we need the concrete value
    cmd='x /'+str(offset/8+1) + 'gx' + ' '+str(addr)
    r.sendline(cmd)
    r.recvuntil(cmd)
    raw=r.recvuntil('(qemu)').strip('\r\n(qemu)').strip('\x1b[K\r\n')
    con=parse_qemu_memory_dump(raw,addr,offset)
    return con

def get_a_page(r,addr):
    cmd='x /512gx '+str(addr&0xfffffffffffff000)
    r.sendline(cmd)
    r.recvuntil(cmd)
    raw=r.recvuntil('(qemu)').strip('\r\n(qemu)').strip('\x1b[K\r\n')
    #print raw
    con=parse_qemu_memory_dump(raw,addr,4096)
    return con


def get_register(r,reg_name):
    cmd='info registers'
    r.sendline(cmd)
    r.recvuntil(cmd)
    raw=r.recvuntil('(qemu)').strip('\r\n(qemu)').strip('\x1b[K\r\n')
    t1=raw.split(reg_name.upper())
    t2=t1[1].split('=')
    val=int('0x'+t2[1][:16],16)
    #t2=t1[1].strip(' ').strip('=').strip(' ')
    #print t2
    print reg_name, hex(val)
    return val


def test():
    r = remote(host, qemu_console_port)
    get_memory(r, 0xffffffff81000000,800)
    con=get_memory(r, 0xffffffff81000000,800)
    print con.encode('hex')
    rax=get_register(r,'rax')
    r9=get_register(r,'r9')
    rip=get_register(r,'rip')
    rip=get_register(r,'rsp')
    rip=get_register(r,'rbp')
    rip=get_register(r,'gs')
    #rip=get_register(r,'GDT')
    print 'is 0xdeadbeef mapped:', page_mapped(r,0xdeadbeef) #test page_mapped
    con=get_a_page(r,0xffffffff81044820)
    print con.encode('hex')

    r.interactive()
    return


if __name__ == '__main__':
	test()
